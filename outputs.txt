<!doctype html>
<html lang=en>
  <head>
    <title>selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for chrome; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location

 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "RJ4hgX6SCQC7UWhiC3AK";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NoSuchDriverException</h1>
<div class="detail">
  <p class="errgitormsg">selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for chrome; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location

</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124401772414560">
  <h4>File <cite class="filename">"/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/selenium/webdriver/common/driver_finder.py"</cite>,
      line <em class="line">64</em>,
      in <code class="function">_binary_paths</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>if path:</pre>
<pre class="line before"><span class="ws">                </span>logger.debug(</pre>
<pre class="line before"><span class="ws">                    </span>&#34;Skipping Selenium Manager; path to %s driver specified in Service class: %s&#34;, browser, path</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws">                </span>if not Path(path).is_file():</pre>
<pre class="line current"><span class="ws">                    </span>raise ValueError(f&#34;The path is not a valid file: {path}&#34;)</pre>
<pre class="line after"><span class="ws">                </span>self._paths[&#34;driver_path&#34;] = path</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>output = SeleniumManager().binary_paths(self._to_args())</pre>
<pre class="line after"><span class="ws">                </span>if Path(output[&#34;driver_path&#34;]).is_file():</pre>
<pre class="line after"><span class="ws">                    </span>self._paths[&#34;driver_path&#34;] = output[&#34;driver_path&#34;]</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-124401790121792">
  <h4>File <cite class="filename">"/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124401772377024">
  <h4>File <cite class="filename">"/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124401772377136">
  <h4>File <cite class="filename">"/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124401772377248">
  <h4>File <cite class="filename">"/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124401772377360">
  <h4>File <cite class="filename">"/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124401772377472">
  <h4>File <cite class="filename">"/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124401772377584">
  <h4>File <cite class="filename">"/workspaces/ai-traffic-web-video/app.py"</cite>,
      line <em class="line">78</em>,
      in <code class="function">generate_traffic</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>options.add_argument(&#34;--headless&#34;)  # Menggunakan mode headless</pre>
<pre class="line before"><span class="ws">        </span>options.add_argument(&#34;--disable-gpu&#34;)</pre>
<pre class="line before"><span class="ws">        </span>options.add_argument(&#34;--no-sandbox&#34;)</pre>
<pre class="line before"><span class="ws">        </span>options.add_argument(&#34;--disable-dev-shm-usage&#34;)</pre>
<pre class="line before"><span class="ws">        </span>service = Service(&#34;./chromedriver/chromedriver&#34;)</pre>
<pre class="line current"><span class="ws">        </span>driver = webdriver.Chrome(service=service, options=options)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>for _ in range(num_requests):</pre>
<pre class="line after"><span class="ws">            </span>for video_url in list_Video:</pre>
<pre class="line after"><span class="ws">                </span>try:</pre>
<pre class="line after"><span class="ws">                    </span>driver.get(video_url)</pre></div>
</div>

<li><div class="frame" id="frame-124401772379712">
  <h4>File <cite class="filename">"/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py"</cite>,
      line <em class="line">45</em>,
      in <code class="function">__init__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">         </span>- keep_alive - Whether to configure ChromeRemoteConnection to use HTTP keep-alive.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>service = service if service else Service()</pre>
<pre class="line before"><span class="ws">        </span>options = options if options else Options()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>super().__init__(</pre>
<pre class="line after"><span class="ws">            </span>browser_name=DesiredCapabilities.CHROME[&#34;browserName&#34;],</pre>
<pre class="line after"><span class="ws">            </span>vendor_prefix=&#34;goog&#34;,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>service=service,</pre>
<pre class="line after"><span class="ws">            </span>keep_alive=keep_alive,</pre></div>
</div>

<li><div class="frame" id="frame-124401772393968">
  <h4>File <cite class="filename">"/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py"</cite>,
      line <em class="line">50</em>,
      in <code class="function">__init__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">         </span>- keep_alive - Whether to configure ChromiumRemoteConnection to use HTTP keep-alive.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>self.service = service</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>finder = DriverFinder(self.service, options)</pre>
<pre class="line current"><span class="ws">        </span>if finder.get_browser_path():</pre>
<pre class="line after"><span class="ws">            </span>options.binary_location = finder.get_browser_path()</pre>
<pre class="line after"><span class="ws">            </span>options.browser_version = None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self.service.path = self.service.env_path() or finder.get_driver_path()</pre>
<pre class="line after"><span class="ws">        </span>self.service.start()</pre></div>
</div>

<li><div class="frame" id="frame-124401772411024">
  <h4>File <cite class="filename">"/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/selenium/webdriver/common/driver_finder.py"</cite>,
      line <em class="line">47</em>,
      in <code class="function">get_browser_path</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>This implementation is still in beta, and may change.</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def get_browser_path(self) -&gt; str:</pre>
<pre class="line current"><span class="ws">        </span>return self._binary_paths()[&#34;browser_path&#34;]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def get_driver_path(self) -&gt; str:</pre>
<pre class="line after"><span class="ws">        </span>return self._binary_paths()[&#34;driver_path&#34;]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _binary_paths(self) -&gt; dict:</pre></div>
</div>

<li><div class="frame" id="frame-124401772414448">
  <h4>File <cite class="filename">"/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/selenium/webdriver/common/driver_finder.py"</cite>,
      line <em class="line">78</em>,
      in <code class="function">_binary_paths</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>self._paths[&#34;browser_path&#34;] = output[&#34;browser_path&#34;]</pre>
<pre class="line before"><span class="ws">                </span>else:</pre>
<pre class="line before"><span class="ws">                    </span>raise ValueError(f&#39;The browser path is not a valid file: {output[&#34;browser_path&#34;]}&#39;)</pre>
<pre class="line before"><span class="ws">        </span>except Exception as err:</pre>
<pre class="line before"><span class="ws">            </span>msg = f&#34;Unable to obtain driver for {browser}&#34;</pre>
<pre class="line current"><span class="ws">            </span>raise NoSuchDriverException(msg) from err</pre>
<pre class="line after"><span class="ws">        </span>return self._paths</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _to_args(self) -&gt; list:</pre>
<pre class="line after"><span class="ws">        </span>args = [&#34;--browser&#34;, self._options.capabilities[&#34;browserName&#34;]]</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for chrome; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location

</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/selenium/webdriver/common/driver_finder.py&#34;, line 64, in _binary_paths
    raise ValueError(f&#34;The path is not a valid file: {path}&#34;)
ValueError: The path is not a valid file: ./chromedriver/chromedriver

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/workspaces/ai-traffic-web-video/app.py&#34;, line 78, in generate_traffic
    driver = webdriver.Chrome(service=service, options=options)
  File &#34;/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py&#34;, line 45, in __init__
    super().__init__(
  File &#34;/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py&#34;, line 50, in __init__
    if finder.get_browser_path():
  File &#34;/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/selenium/webdriver/common/driver_finder.py&#34;, line 47, in get_browser_path
    return self._binary_paths()[&#34;browser_path&#34;]
  File &#34;/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/selenium/webdriver/common/driver_finder.py&#34;, line 78, in _binary_paths
    raise NoSuchDriverException(msg) from err
selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for chrome; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location

</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/selenium/webdriver/common/driver_finder.py", line 64, in _binary_paths
    raise ValueError(f"The path is not a valid file: {path}")
ValueError: The path is not a valid file: ./chromedriver/chromedriver

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/workspaces/ai-traffic-web-video/app.py", line 78, in generate_traffic
    driver = webdriver.Chrome(service=service, options=options)
  File "/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py", line 45, in __init__
    super().__init__(
  File "/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py", line 50, in __init__
    if finder.get_browser_path():
  File "/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/selenium/webdriver/common/driver_finder.py", line 47, in get_browser_path
    return self._binary_paths()["browser_path"]
  File "/workspaces/ai-traffic-web-video/selenium_env/lib/python3.9/site-packages/selenium/webdriver/common/driver_finder.py", line 78, in _binary_paths
    raise NoSuchDriverException(msg) from err
selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for chrome; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location



-->
